/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2015, Joyent, Inc.
 */

/*
 * NOTE: SQL-style to-end-of-line comments (starting with two hyphens) are NOT
 * supported in this file due to MORAY-317.  Use multiline C-style comments.
 *
 * NOTE: If you update this function in any way, you MUST update the version
 * number encoded in the name, as well as the version number in the call to
 * manta_update_versioned_trigger() below.
 */

/*
 * Defines version N of this trigger.  This code is executed any time we check
 * to see if we need to update the trigger.  It's possible that no version is
 * installed, an older version is installed, a newer version is installed, or
 * this exact version is already installed.
 *
 * If this script is executed concurrently by multiple clients, it's possible
 * for this operation to fail with a "tuple concurrently modified" error.  This
 * is annoying, but not easy to work around:
 *
 *     o We cannot DROP the function instead (even inside a transaction) because
 *       it may be in use by an existing trigger.
 *     o We cannot DROP the trigger along with it, even if we recreate it inside
 *       a transaction, because that operation takes an exclusive table lock and
 *       it's critical that we not do that unless we actually need to update the
 *       trigger.)
 *     o There is no CREATE FUNCTION IF NOT EXISTS.
 *
 * Sadly, the easiest thing to do is to have the caller retry on this error
 * until it succeeds.  The assumption is that as long as the number of clients
 * is bounded, and all clients are retrying, then eventually all will succeed
 * because each time the error is returned, one of the clients has succeeded.
 */
CREATE OR REPLACE FUNCTION count_manta_directories_v3() RETURNS TRIGGER AS
    $FunctionCode$
    DECLARE tmpcount NUMERIC;
    DECLARE niters NUMERIC;
    BEGIN

        IF TG_OP = 'INSERT' THEN
            /*
             * This operation is a textbook UPSERT: we must update a record if
             * it exists or insert a record if not.  While modern PostgreSQL
             * versions have good support for UPSERT operations, we're targeting
             * version 9.2, which does not.  To deal with this, we use the
             * approach suggested in the "Trapping Errors" section of the
             * pl/pgSQL documentation, which is based on a loop.  But we bound
             * the loop to ensure that a bug in this code does not cause queries
             * to hang indefinitely.
             */
            FOR niters IN 1..50 LOOP
                /*
                 * We first try to bump the counter for this directory.  If
                 * there is no record for the counter, then this query will
                 * succeed but update zero rows.  The special boolean variable
                 * FOUND indicates whether any rows were matched.
                 */
                UPDATE manta_directory_counts
                SET
                    entries = entries + 1
                WHERE
                    _key = NEW.dirname;

                IF FOUND THEN
                    RAISE NOTICE 'count_manta_..._v3(): AFTER INSERT, USING UPDATE (after % tries)', niters;
                    RETURN NULL;
                END IF;

                /*
                 * The row was not present.  Now try to insert it.  If that
                 * works, we're done.
                 */
                BEGIN
                    INSERT INTO manta_directory_counts
                        (_key, _value, _etag, _vnode, entries)
                    VALUES
                        (NEW.dirname, '{}', '_trigger', NEW._vnode, 1);
                    RAISE NOTICE 'count_manta_..._v3(): AFTER INSERT, USING INSERT (after % tries)', niters;
                    RETURN NULL;
                EXCEPTION WHEN unique_violation THEN
                    /*
                     * We've raced with another operation.  Go to the top of the
                     * loop to try again.
                     */
                END;
            END LOOP;

            RAISE EXCEPTION 'count_manta_directories_v3() looped too many times';
        ELSE
            /* TG_OP = 'DELETE' */
            tmpcount := (SELECT entries FROM manta_directory_counts
                WHERE _key = OLD.dirname FOR UPDATE);
            IF (tmpcount <= 1) THEN
                DELETE FROM
                    manta_directory_counts
                WHERE
                    _key = OLD.dirname;
            ELSE
                UPDATE
                    manta_directory_counts
                SET
                    entries = entries - 1
                WHERE
                    _key = OLD.dirname;
            END IF;
            RETURN NULL;
        END IF;
    END;
$FunctionCode$ LANGUAGE plpgsql;

/*
 * Transactionally install this trigger.
 */
BEGIN;
SELECT manta_update_versioned_trigger(
    'manta', 'count_directories', 3, 'count_manta_directories');
COMMIT;
